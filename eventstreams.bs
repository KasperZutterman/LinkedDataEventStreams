<pre class='metadata'>
Title: Linked Data Event Streams spec
Shortname: LDES
Level: 1
Status: LS
Group: TREE community group
URL: https://semiceu.github.io/ldes/specification
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Abstract: A Linked Data Event Stream is a collection of immutable objects (such as version objects, sensor observations or archived representations). Each object is described in RDF. The objective of a Linked Data Event Stream is to allow consumers to replicate all of its items and to stay in sync when items are added.
</pre>

# Introduction # {#introduction}

A Linked Data Event Stream (LDES) (`ldes:EventStream`) is a collection of immutable objects, each object being described using a set of RDF triples ([[!rdf-primer]]).

This specification uses [TREE](https://treecg.github.io/specification) for its collection and fragmentation (or pagination) features, which in its turn is compatible to other specifications such as [[!activitystreams-core]], [[!VOCAB-DCAT-2]], [[!LDP]] or [Shape Trees](https://shapetrees.github.io/specification/spec).

We define `ldes:EventStream rdfs:subClassOf tree:Collection`.
It extends the `tree:Collection` class by saying all of its members are immutable, and you can thus only add members to the collection.

Note: A Linked Data Event Stream client can thus keep a list (or cache) of already processed member IRIs, and only emit new ones. A reference implementation of a client is available as part of the Comunica framework on [NPM and Github](https://github.com/treecg/event-stream-client).

<div class="example" highlight="turtle">
```turtle
<C1> a ldes:EventStream ;
     tree:shape <shape1.shacl> ;
     tree:member <Obervation1> .

<Observation1> a sosa:Observation ;
               sosa:resultTime "2021-01-01T00:00:00Z"^^xsd:dateTime ;
               sosa:hasSimpleResult "..." .
```
</div>

<div class="example">
```turtle
<C2> a ldes:EventStream ;
     tree:shape <shape2.shacl> ;
     tree:member <AddressRecord1/version1> .

<AddressRecord1/version1> dcterms:created "2021-01-01T00:00:00Z"^^xsd:dateTime ;
                          adms:versionNotes "First version of this address" ;
                          dcterms:isVersionOf <AddressRecord1> ;
                          dcterms:title "Streetname X, ZIP Municipality, Country" .
```
</div>

A `tree:shape` MUST be set on top of an LDES. The shape of the collection is a contract and identifies this particular collection: it tells clients all old and new members of the stream have been and will be validated by that shape. While this shape MAY evolve, it MUST always be backwards compatible to the earlier version.

Note: Clients can use the shape for their source selection.

Note: Mind that this shape for as long as this collection exists will need to be backwards compatible with the older non-immutable objects. When due to functional requirements you need to change an earlier version of an `ldes:EventStream`, there are two options: create a new version of the object with a new shape that is backward compatible, or replicate and transform the entire collection into a new collection.

Note: in Example 1, we consider the Observation object ot be an immutable object and we can use the existing identifiers. In Example 2 however, we still had to create version IRIs in order to be able to link to immutable objects.

<!--What’s an authoritative source and what’s a third party indexer?-->

# Fragmenting and pagination # {#tree}

The goal of an LDES is to allow clients to replicate the history of a dataset as well as synchronize with its latest changes.
Linked Data Event Streams MAY be fragmented when their size becomes too big for 1 HTTP response.
Fragmentations MUST be described using the features in the [TREE specification](https://treecg.github.io/specification).
All relation types from the TREE specification MAY be used.

<div class="example">
```turtle
<C1> a ldes:EventStream ;
     tree:shape <shape1.shacl> ; # this shacl shape for as long as this collection exists will need to be backwards compatible.
     tree:member <Obervation1>, ... ;
     tree:view <?page=1> .

<?page=1> a tree:Node ;
    tree:relation [
        a tree:GreaterThanOrEqualToRelation ;
        tree:path sosa:resultTime ;
        tree:node <?page=2> ;
        tree:value "2020-12-24T12:00:00Z"^^xsd:dateTime
     ] .
```
</div>

Note: Also according to the TREE specification, one can optionally annotate a `tree:Node` with a `tree:importStream` to find more data.

Note: A 1-dimensional fragmentation based on creation time of the immutable objects is probably going to be the most interesting and highest priority fragmentation for an LDES, as only the latest page, once replicated, should be polled for updates.

<div class="example">
```turtle
<C1> a ldes:EventStream ;
     tree:shape <shape1.shacl> ; # this shacl shape for as long as this collection exists will need to be backwards compatible.
     tree:member <Obervation1>, ... ;
     tree:view <?page=1> .

<?page=1> a tree:Node ;
          tree:search [
             a hydra:IriTemplate ;
             hydra:template "objects{?since}" ;
             hydra:variableRepresentation hydra:BasicRepresentation;
             hydra:mapping [
                 a hydra:IriTemplateMapping ;
                 hydra:variable "since";
                 hydra:property tree:timeQuery ;
                 tree:path sosa:resultTime ;
                 hydra:required false
             ]
          ] .
```
</div>

Note: Cfr. Example 4, also a search form can make a one dimensional feed of immutable objects more searchable.

# Indicating the completeness of your streams # {#completeness}

## Status indication ## {#status}

When replicating a stream on your own system when, for example, building other `tree:view`s on top of them with different fragmetnations, you might want to track the progress of how much elements from the original stream are processed into your own system. This is done using: TODO.

## Describing retention policies ## {#retention}

By default, an LDES MUST keep all data that has been added to the `tree:Collection`.

It MAY add a retention policy in which data generated before a specific time will be removed from the server.
Third parties MAY archive these objects.

A retention policy can be introduced as follows:

```turtle
<Collection> a ldes:EventStream ;
             tree:view <> .

<> ldes:retentionPolicy <P1> .

<P1> a ldes:DurationAgoRelation ;
     tree:path prov:generatedAtTime ;
     tree:value "P1Y"^^xsd:duration . # Keep 1 year of data
```

If a `tree:relation` is set, then this automatically also becomes the preservation strategy of the rest of the nodes.

Issue: Maybe it’s an idea to generalize this to geospatial as well, and to have a retention policy able to select a geospatial region?


## Version Subsets ## {#version-subsets}

In order to indicate you only keep 1 specific version, e.g., the latest, in your stream, you can do this:

```turtle
<Collection> a tree:EventStream ;
             tree:view <> .

<> ldes:versionSubset <P1> .

<P1> a ldes:LatestOnly ;
     ldes:amount 1 ; #default
     ldes:vary () ; # sosa:featureOfInterest? when this is a sensor, I want the latest compound measure by a specific sensor
     ## ????
      .
```

Retention policies and version subsets MAY be used together.
A member can however only be deleted from the server when both conditions are met (e.g., when there is still at least 1 item of this thing, and when the duration has not yet passed).
<!--Order of importance: first a preservation policy MUST be interpreted, and only then a version subset-->

# Derived Event Streams # {#derived}

## Derived views


## Derived collections

TODO: PAV ontology?


# Discovering Linked Data Event Streams, views and derived collections # {#event-streams}

You can discover Event Streams using DCAT metadata.


# Vocabulary # {#vocabulary}

## ldes:EventStream ## {#ldes:EventStream}
